{
  "_args": [
    [
      "pakman@>=0.11.5 <0.12.0",
      "/home/bornevia/graphjs/node_modules/pakmanager"
    ]
  ],
  "_from": "pakman@>=0.11.5 <0.12.0",
  "_id": "pakman@0.11.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/pakman",
  "_npmUser": {
    "email": "coolaj86@gmail.com",
    "name": "coolaj86"
  },
  "_npmVersion": "1.1.63",
  "_phantomChildren": {},
  "_requested": {
    "name": "pakman",
    "raw": "pakman@>=0.11.5 <0.12.0",
    "rawSpec": ">=0.11.5 <0.12.0",
    "scope": null,
    "spec": ">=0.11.5 <0.12.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pakmanager"
  ],
  "_resolved": "https://registry.npmjs.org/pakman/-/pakman-0.11.5.tgz",
  "_shasum": "6452fd1d65aefac1c8f2e381a5aff6023e3dd61b",
  "_shrinkwrap": null,
  "_spec": "pakman@>=0.11.5 <0.12.0",
  "_where": "/home/bornevia/graphjs/node_modules/pakmanager",
  "author": {
    "email": "coolaj86@gmail.com",
    "name": "AJ ONeal",
    "url": "http://coolaj86.info"
  },
  "bugs": {
    "url": "https://github.com/coolaj86/node-pakman/issues"
  },
  "dependencies": {
    "detective": ">=0.2.1 <0.3.0",
    "forEachAsync": ">=2.2.0 <2.3.0",
    "future": ">=2.3.1 <3.0.0",
    "npm": ">=1.1.59 <2.0.0"
  },
  "description": "A tool for building package managers",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "6452fd1d65aefac1c8f2e381a5aff6023e3dd61b",
    "tarball": "https://registry.npmjs.org/pakman/-/pakman-0.11.5.tgz"
  },
  "engines": {
    "node": ">= v0.2.0"
  },
  "homepage": "https://github.com/coolaj86/node-pakman#readme",
  "main": "lib/index",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "pakman",
  "optionalDependencies": {},
  "readme": "pakman\n===\n\nA collection of tools for building package managers.\n\n[`pakmanager`](http://github.com/coolaj86/node-pakmanager) is an example (but fully functional) package manager.\n\nGiven a directory with a `package.json`, `pakman` can give you back concatonated normalized scripts that will run with a custom module loader - such as in the browser.\n\nFeatures\n---\n\n  * alternate dependency lists - searches in this order:\n      * package.json.ender.dependencies\n      * package.json.enderDependencies\n      * package.json.browserDependencies\n      * package.json.dependencies\n  * modulename aliasing - normalizes local requires as 'mymodule/submodule' or 'myprovidesalias/submodule'\n      * package.json.provides\n      * package.json.name\n\nDemo\n===\n\n    git clone git://github.com/coolaj86/node-pakman.git\n    cd node-pakman/tests\n    ls ../test_modules/foomodule/\n    node test-compile-local ../test_modules/foomodule/\n\nAPI\n===\n\nIn order to make debugging (and extension) simpler,\nevery API function is in it's own file in `lib` and contains and point-and-shoot test in `test`.\n\nmodules\n---\n\nEach module object looks something like this:\n\n    {\n        \"package\": \"foomodule-browser\",           // npm name\n        \"name\": \"corge\",\n        \"pathname\": \".\",                          // relative to package.json.lib\n        \"filename\": \"corge.js\",\n        \"require\": \"../corge\",                    // how this module was required by its parent\n        \"modulepath\": \"foomodule-browser/corge\",\n        \"providespath\": \"foomodule/corge\",        // where package.json.provides is 'foomodule'\n        \"requires\": [\n            \"./foo\",\n            \"bar\"\n        ],\n\n        \"scriptSource\": \"(function () {\\n  \\\"use strict\\\";\\n\\n  require('./foo');\\n  require('bar');\\n\\n}());\\n\",\n\n        \"dependencyList\": [ ... ], // other modules, ordered (by line number)\n        \"dependencyTree\": { ... }, // other modules, mapped by modulepath\n\n        // in the case that it is known the module cannot be found\n        \"error\": {\n            \"stack\": \"Error: Couldn't find \\\"./doesnt-exist\\\"\\n    at onDirRead (./lib/get-script.js:50:18)\",\n            \"message\": \"Couldn't find \\\"./doesnt-exist\\\"\"\n        }\n    }\n\npakman\n---\n\nAll API methods are attached to the pakman object.\n\n    var pakman = require('pakman')\n      ;\n\n    console.log(Object.keys(pakman));\n\ncompile\n---\n\nGiven a module path, and a render function, compiles all of the local dependencies (pre-normalized).\n\n    var compile = require('./lib/compile').compile\n      , fs = require('fs')\n      ;\n\n    function render(module) {\n      return ''\n        + '\\n' + '// module: ' + module.modulepath + ' as ' + module.providespath\n        + '\\n' + '(function () {'\n        + '\\n' + module.scriptSource \n        + '\\n' + '}());'\n        + '\\n' + // footer'\n        + '\\n\n        ;\n    }\n\n    function writeOut(err, compiled) {\n      fs.writeFile('app.js', 'utf8');\n    }\n\n    compile('/path/to/some/module', render, writeOut);\n\nTODO: Provide package info and allow async rendering: `function render(pkg, module, fn)`\n\nmakePackageReady\n---\n\nGiven a module path, makes the module package-ready - hands you back everything you need to template the dependency with your own packag system.\n\n\n    var makePackageReady = require('./lib/make-package-ready').makePackageReady\n      ;\n\n    function handlePackageComponents(error, pkg, missing, unlisted, unused, local, pm, builtin) {\n      // error{} - couldn't read package.json, etc\n      // pkg{} - the package.json info\n      // missing[] - local files referenced, but not found\n      // unlisted[] - npm modules referenced, but not in package.json\n      // unused[] - npm modules in package.json, but not references\n      // local[] - all local modules, ordered as they would need to be listed in a browser package\n      // pm[] - all package-managed (npm) modules\n      // builtin[] - builtin modules (such as `window`, `document`, etc in the browser, or `Buffer` in node)\n    }\n\n    // the directory must contain a `package.json`\n    makePackage('/path/to/some/module', handlePackageComponents);\n\nFound in `lib/make-package-ready.js`\n\nRequires\n\n  * `sort-tree-by-types`\n  * `reduce-tree`\n  * `get-package-tree`\n  * `normalize-package-dependencies`\n  * `normalize-script-requires`\n\ngetPackageInfo\n---\n\nGiven a module path, gives the parsed `package.json` with normalized `main` and `lib` (both *will* exist).\n\n    var getPackageInfo = require('./lib/get-package-info').getPackageInfo\n      ;\n\n    function handlePackageInfo(error, pkg) {\n      // error{} - couldn't read package.json, wrong permissions, etc\n      // pkg{} - the normalized package.json info\n    }\n\n    getPackageInfo('/path/to/some/module', handlePackageInfo);\n\nAPI Call Graph\n===\n\n  * compile\n    * make-package-ready\n      * normalize-package-dependencies\n      * normalize-script-requires\n      * reduce-tree\n      * sort-tree-by-types\n        * get-npm-package-info\n          * get-package-info\n      * get-package-tree\n        * get-package-info\n        * get-module-tree\n          * get-module-leaf\n            * get-requires\n            * get-script\n              * get-file\n    * get-npm-tree\n      * get-npm-package-info\n      * get-package-info\n",
  "repository": {
    "url": "git://github.com/coolaj86/node-pakman.git"
  },
  "version": "0.11.5"
}
